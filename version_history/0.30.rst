What's new in MPF 0.30
======================

Version 0.30 is the biggest change to MPF yet in terms of changes to a
single version. We knew we had to make some big changes at some point
to some internal architecture things, so we decided to "rip the Band
Aid off" and do it all at once. The good news is that most of the
fundamental concepts of MPF did not change, (it's mostly internal
architecture stuff). Also, we have a migration tool which will migrate
your existing config files and show files to the new format, so you
should be able to get your game up and running quickly on the new
version.

Note that this document merely lists the big new features and changes to MPF 0.30. All of
these changes will be incorporated into the general MPF documentation as we get
that documentation updated. If you have an existing machine project on MPF
0.21, refer to our MPF 0.21 to MPF 0.30
:doc:`migration guide </howto/installation/migrate_from_21_to_30>`
for details on how to migrate your machine
code and configs to MPF 0.30. Here's an overview of the changes to MPF in
v0.30. Not every change is listed here, but these are the big ones:


MPF now requires Python 3
-------------------------
Prior versions of MPF used Python 2.7. Python 2.7 is now about 8 years
old and no longer receives new features. Python 3 was released in
2008 and is currently on version 3.5. MPF 0.30 requires at least
Python 3.4. If you plan to use the MPF Media Controller on Windows
(more on that in a bit), you need to use Python 3.4. If you're on Mac
or Linux, or you're on Windows but you plan to use the Unity Media
Controller, you can use Python 3.4 or 3.5. We recommend you use the
latest patch release of Python you can. (Currently 3.4.4 or 3.5.1) MPF
(and the MPF Media Controller) can run in 32-bit or 64-bit mode. We
recommend that you run the version that matches your OS.


Mac OS X is officially supported
--------------------------------
Prior versions of MPF leveraged a multimedia library called "Pygame"
that was very buggy on the Mac, leading us to recommend that if you
are a Mac user, you run MPF in a VM running either Ubuntu or Windows.
MPF 0.30 no longer uses Pygame, so you can use MPF on a Mac natively.


The Media Controller is now a separate package from MPF
-------------------------------------------------------
Starting in MPF 0.30, the MPF Media Controller (also referred to as
the "Media Controller" or simply the "MC") is now a separate package
from MPF. This means there are two packages in GitHub: `mpf <https://github.com/missionpinball/mpf/>`_ (the MPF
core engine) and `mpf-mc <https://github.com/missionpinball/mpf-mc/>`__ (the media controller). We did this for
several reasons:

+ It allows us to tie the pre-reqs for the MC to the MC package,
  meaning if you're not using the MPF-MC (perhaps because you're using
  the Unity-based MC or because you have an EM machine that doesn't have
  graphics and sound), now you don't have to mess with all the pre-reqs
  for the MC which you won't use just to use MPF.
+ It lets us separate the release cycles of the two projects and
  handle patches and updates separately.

From an installation standpoint, it's still really easy to install
both MPF and the MPF-MC at the same time, so really the fact that
they're two separate packages doesn't impact you, but it's important
to know.


The MPF-MC has been completely rewritten from scratch
-----------------------------------------------------
The new MPF-MC component has been completely rewritten from scratch
for MPF 0.30. The main reason is the fact that the MPF-MC for v0.30 uses a multimedia library
called "Kivy" instead of Pygame. We had many problems and limitations
with Pygame, including:

+ Pygame is not maintained anymore. The last release was in 2009,
  which means it only works with the versions of Python that were
  current in 2009.
+ Bugs that have been found since 2009 have not been fixed. (For
  example, the Mac version of Pygame has a memory leak which is why we
  can’t support MPF on a Mac.)
+ The audio system in Pygame is very basic. It only allows 2-channels
  (no surround sound), 8 simultaneous voices, and a single music track.
+ Pygame does all of its graphical processing in the CPU, meaning it
  does not leverage the GPUs in modern computers. This leads to both
  lower performance and higher CPU usage. (Things that a GPU can do
  almost instantly take a lot of processing power if they’re done on a
  CPU.)
+ Pygame only supports video if it’s encoded into MPEG-1 format with
  very obscure settings which does not lead to high quality videos. (And
  Pygame on the Mac doesn't support video at all!)
+ Pygame cannot precisely control where the graphical window pops up
  on the screen, which is a problem for machines that have an LCD in the
  backbox that is partially obscured.

The `Kivy <http://kivy.org>`_ multimedia library is modern and updated often. It
leverages modern base multimedia libraries (like SDL2 and GStreamer),
and it can fully leverage the GPU. It's also licensed
via the MIT license (which is the license MPF uses), and Kivy apps can
also be built for iOS and Android (in addition to Windows, Mac, and
Linux), opening up future possibilities for MPF.


Proper Python package installers, and inclusion in PyPI
-------------------------------------------------------
Starting in MPF 0.30, we have created "proper" Python installers
(rather than the hand-build scripts we used in the past). We have also
uploaded the MPF source packages into the Python Package Index
(PyPI, also called the "Cheese Shop"), which is sort of like an app
store for Python packages. This means that installing MPF is now as
simple as running `pip install mpf` from a command line, and it will
automatically connect and download all the prerequisites you need.
(Actually if you run `pip install mpf-mc`, that will install the MC
which itself includes MPF as a prereq, so that single command will
give you everything you need.) The packages in PyPI are pre-compiled
for Windows and Mac, so installation is fast and easy and nothing has
to be compiled. This change also means that MPF and MPF-MC are
installed into your Python site-packages folder, and updating them is
as simple as running another pip command.


Change to how MPF is launched
-----------------------------
Now that MPF has a proper installer and is installed from PyPI, the
way you actually launch MPF has changed. Starting in MPF 0.30, you
simply open a command prompt and switch to your machine folder, then
simply run mpf to launch the `mpf` core engine, or `mpf mc` to launch
the MC. (On Windows you can alternately run `mpf both` to launch
both.)


Config files are now version 4
------------------------------
MPF 0.30 changes the #config_version setting in your machine config
files to `#config_version=4`. (Again, the migration tool will migrate
your existing config files to the new format. See our How To guide on
migrating from MPF 0.21 to 0.30 for details.)


Changes to show files and formats
---------------------------------
The biggest change to MPF in 0.30 (besides moving from Pygame to Kivy)
is that the internal processing of shows has completely changed. There
are several changes here, so let's look through them one-by-one:


All shows are driven by MPF
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Prior to MPF 0.30, it was kind of confusing because there were
actually two different show players. One of them ran on the "MPF side"
of things and was responsible for shows that included machine
hardware, like lights, LEDs, coils, flashers, etc. The other ran on
the "MC side" of things and handled shows which included sounds and
display stuff. This was bad for several reasons:

+ It was confusing.
+ It was difficult (or impossible) to create single shows that
  included MPF and MPF-MC components. (e.g. how do you make a show that
  includes synchronized lights and sounds?)
+ Starting and stopping shows was hard because what if MPF started a
  show, and MPF-MC tried to start a show too, but the MPF-MC was busy so
  it had to queue that show, but the MPF show was already started, so
  you had them out of sync, then you tried to cancel one... it was a
  mess.

In MPF 0.30, there is only one show controller and one type of show.
They all run on the MPF side of things. This single show has the
ability to send commands (via BCP) for things that should be run on
the MC side, so a show can still include sounds or slides and MPF will
send those instructions, when that show step comes up, via BCP to the
MC where the MC can process and play them.


Show content is "played" by the standard config_players
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Another weird thing about shows in prior versions of MPF is that the
way shows "played" each step was different from the way a
config_player would play a config. (A "config_player" is a section of
the config that "plays" something, like the light_player, led_player,
sound_player, slide_player, etc. It's basically what maps some MPF
event to some kind of action to be played.) So in the old version of
MPF, in a show, you might have a *lights:* section which contained
instructions for what lights to "play" in that step, and then you
might also have a *light_player:* section of a mode or machine config
file with also contains instructions for what lights to "play" when a
certain event is posted. The problem was that those were two
completely sections of code (one was in the show controller and the
other was in the light_player). This was bad because the exact formats
of the options were not identical between the two different types of
players, and different ones had different features, etc. So in MPF
0.30, we said, "Why do these two types of players have to be
different? If we have something called a "light player", should that
same code be used to play whatever is in the *lights:* section in a
show step and also to play whatever is in the *lights_player:* section
of a config file when that even is posted? These are what are known as
"config players" in MPF 0.30. (Note that the word "player" here has
nothing to do with a human player of a pinball game.) MPF 0.30 has
several built-in config players, including:

+ bcp_player
+ coil_player
+ event_player
+ flasher_player
+ gi_player
+ led_player
+ light_player
+ random_event_player
+ show_player
+ trigger_player

Also, the config_player functionality of MPF allows for plugins which
can play their own types of configs, and if you have the MPF-MC
installed, it registers three additional config players:

+ slide_player
+ sound_player
+ widget_player

Again, the beauty here is that each of these players is responsible
for that player's section of the config file and also for that
player's section of a show step. So the "flasher_player" handles both
the *flasher_player:* of the machine or mode config file and also the
*flashers:* section of a show step. This is also great for reliability
and testing. Now each player doesn't have to have its own logic for
registering and deregistering events and everything—instead that's all
shared from a base class and each individual player only needs to know
how to deal with its own type of devices.


Playlists become shows
~~~~~~~~~~~~~~~~~~~~~~
Prior versions of MPF were very hit-or-miss when it came to putting
together playlists, again because every component had to implement its
own type of playlist. In MPF 0.30, since config_players are
responsible for the actual processing of each step of a show, the show
files and the show controller essentially become "dumb" containers.
(This is a good thing.) It also means that you can start, stop, and
advanced other shows within the steps of a show (since the show_player
is now just a config_player like anything else). This also means that
you can use a show like a playlist, adding whatever you want to each
step of a show (again, including other shows). In other words, MPF
0.30 now supports playlist of anything. We will also be adding
universal transition support, so each config_player can implement its
own transitions which can be used within shows. (Currently transitions
are manually implemented for sounds and slides. We'll make those more
generic and universal soon.)


Tocks: are gone, shows now operate on real-world time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The concept of *tocks:* has been removed from show files. Now, each
step of a show is driven by a *time:* setting (which can be like any
time string in MPF, including milliseconds, seconds, minutes, etc.).
MPF 0.30 also adds the option for time settings for individual show
steps to be specified in relative terms (time after the previous step)
or in absolute terms (time since the beginning of the show). Absolute
time steps was needed when synchronizing lights and LEDs with sounds
and videos. Even though show steps are configured based on time, you
can still set the playback speed of a show to play a show faster or
slower, and you can still change the playback speed of a running show.
Show in MPF <= 0.21:

::

    - tocks: 1
      leds: ...
    - tocks: 2
      leds: ...

Show in MPF 0.30:

::

    - time: 0
      leds: ...
    - time: +1
      leds: ...
    - time: +2

The *time:* entries in shows are standard MPF time strings. The
default is seconds, but you can enter ms, minutes, etc. Also note the
`+` before the time in the example above. Time values that start with
plus are *incremental*, meaning they are the time since the previous
step ended. If you don't enter a plus sign, that means the time is
*absolute* from the beginning of the show. (Absolute values make it
easy to sync show steps with audio or video.) Also note that the time
values for show steps in MPF 0.30 are shifted "down" one position. In
other words, shows in MPF 0.30 always start with a time: 0, and they
always end with an empty final step which specifies the time after the
last step when the show ends. This may seem kind of confusing at
first, but it's necessary for the absolute times to work. If you think
about it, in old versions of MPF, the *tocks:* value was technically
the time when the following step started (since tocks specified how
many tocks that step lasted). So in order to make absolute times work
in MPF 0.30, we had to change it so the *time:* value of a step was
the time when that step *started*, rather than the time when that step
*ended*. Note that the migration tool will add quotation marks around
time values that start with +. This isn't actually necessary, it's
just something the migration tool does.


Light scripts are gone, replaced by placeholder "tokens" in shows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Prior versions of MPF included light and led scripts, which were like
shows except that instead of specifying which lights or LEDs each step
would apply to, you passed a list of lights or LEDs when the script
was started. (And then the act of playing a script would build up a
temporary show with the proper light or LED names inserted into it.)
The problem with this was that light scripts were very specifically
written only to cover lights and LEDs, and they were not very
flexible. (Even though shows had lots of options, only a subset of
those options were exposed to light scripts. So in MPF 0.30, we
completely removed the concept of light scripts and instead added a
placeholder "token" concept to shows. For example, in MPF 0.30,
anything that's in parenthesis in a show file will now be replaced (in
real time) with key/value pairs that are passed to that show when it
starts. For example, you could have a show file like this:

::

    - time: 0
      (leds): ff0000
    - time: +1s
      (leds): 000000

Then when you play that show, you could pass a value of `leds=led1`
(or a list of values, like `leds=[led1, led2, led3]`), and the
`(leds)` sections in the show file will automatically be replaced by
the values you pass. The actual names of the tokens can be anything
you want. For example, you could have a line called `(banana): ff0000`
in your show, and then pass `banana=led1` when the show plays, and
that will be fine too. So this is how tokens with placeholder tokens
replace light scripts. This is very powerful for two reasons:

+ Since shows now use those universal config players, this means that
  what used to be called light scripts (which are now these shows with
  tokens), now these shows can be used with *anything*. You can now have
  dynamically-replaced placeholder tokens which can work with lights,
  LEDs, other shows, flashers, events, coils, slides, sounds, etc.
+ You can put your placeholder tokens anywhere in a show. So instead
  of having the `(leds)` token as the list of LEDs in the example above,
  you could add `(leds): (color1)` and `(leds): (color2)`, and then you
  could pass `leds=led1, color1=ff0000, color2=000000` to create a show
  which could dynamically flash any led (or list of leds) between
  whatever two colors you wanted.



Additional of #show_version=4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Since shows now pull so much of their config options from the
associated config_players, starting in MPF 0.30 you now need to add a
`#show_version=4` as the first line of show show YAML file. (This is
similar to the `#config_version=4` setting you add to your config
files.) The migration utility that comes with MPF 0.30 will
automatically add this (as well as converting your existing shows with
*tocks:* format to the new *time:* format), and since shows now have
the version number in them, future versions of the migrator will
continue to be able to migrate your show files if anything ever
changes in the future.


Named colors
------------
MPF 0.30 now supports specifying colors by name instead of by hex
value. This works anywhere that colors are specified, including in
shows and for commands that are executed directly, and it applies
everywhere colors are used (for LEDs, display widgets, etc.). By
default, MPF includes a built-in list of the standard W3C web
colors.

You can also define your own colors and add them to the
list. What's really cool is that the lookup process which converts a
color name to a color value is done in every time a color is used, so
you can actually redefine or update the values for colors dynamically
in your game and the colors will start using those values from there
are out. (This is cool for operator settings like white balance and
also for using the same effect for different modes where you could
have a bunch of effects written to use a color called *modecolor* and
then you just keep updating that color value depending on which mode
is running.)


Hardware accelerated LED fades
------------------------------
Previous versions of MPF did LED fades and color transitions by
repeatedly sending incremental color commands with each "tick" of the
MPF clock. That meant that if you were running MPF at 60Hz, a 100ms
fade would actually take place in six "steps" that were 16ms apart.
(100ms / 60Hz) In v0.30, MPF can send fade commands to supported
hardware to "smooth out" the fades. This means that even though MPF is
only sending updates every 16ms, it can tell the hardware LED
controller that it wants to fade from one color to the next, and the
hardware controller can do several sub-step fades in-between MPF
steps. This is currently supported on FAST LED controllers, and will
soon be added to Multimorphic PD-LED and FadeCandy controllers.


Asset Pools
-----------
MPF now supports grouping assets into asset "pools" which is where you
have multiple physical asset files that are combined together into a
single asset name. For example, instead of just playing the same
slingshot sound over and over every time a sling shot is hit, you
could actually create four different sounds, and the asset manager
will play a different sound each time. You can control how each sound
is selected too. (Random, weighed random, round robin, random but play
them all before repeating any, etc.)


Ball Search
-----------
MPF 0.30 now includes a proper ball search feature, with advanced
options to control things like timing between searches, order devices
are searches, and what happens during multiple phases of the search.
(Maybe if there's a device holding a ball, you don't fire that
device's eject coil during the initial ball search rounds, but if
after 5 search rounds it still hasn't found the ball, you can try
pulsing that coil too.) This is all exposed via the config files.


Accelerometer-based tilts
-------------------------
If you're using MPF with a hardware platform that supports
accelerometers, you can now configure the tilt to be based on the
accelerometer with g-force settings.


Servo Support
-------------
MPF 0.30 now includes built-in support for servo devices accessible
via several hardware platforms.


Text Strings
------------
When you specify text for the display (either the on screen display or
via a DMD), you can now use a dollar sign to specify a text string
lookup instead of adding the actual text to your config. For example,
in a text widget config:

::

    - type: text
      text: $welcome

And then in your config file:

::

    text_strings:
      welcome: Welcome!

This gives you the flexibility to use different config files with
different sets of text strings. For example, you might have a "mature"
and "family-friendly" versions of text strings, or you could have
different text strings for different languages. Note that these text
strings are just for static text lookup. You can still access player
variables, machine variables, and event parameters in text widgets the
same way you always could (though now variables can contain text
strings and vice-versa).


Placeholder variables %var% -> (var)
------------------------------------
The placeholder variables for player, machine, and event parameters in
text strings have be changed from percentage signs to parenthesis. MPF
<= 0.21:

::

    - type: text
      text: BALL %ball%

MPF 0.30:

::

    - type: text
      text: BALL (ball)

Not only is this cleaner visually, it also means you don't have to put
quotation marks around values that start with %.


Deprecations
------------
MPF 0.30 removed the following features:

+ .DMD formatted files are no longer supported. (We think they're not
  necessary but can add support for them if needed.)
+ External shows (This is temporary. They'll come back in 0.31.)
