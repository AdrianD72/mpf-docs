
The *leds:*section of the machine configuration file controls mappings
and settings for `RGB LEDs`_ in your pinball machine. This section
*can* be used in your machine-wide config files. This section *cannot*
be used in mode-specific config files. Note: This section is for LEDs
connected to LED controller boards, such as the Multimorphic PD-LED,
the FAST Pinball controllers'RGB LED outputs, or a third party LED
controller like a FadeCandy. This section is *not* for "drop in"
replacement LEDs (like those from CoinTaker) which you put into
existing machines, so those are *`Matrix Lights`_* as far as MPF is
concerned: ` `_ Here's an example *leds:* section from a machine
configuration file:


::

    
    leds:
        l_led0:
            number: 00
            brightness_compensation: 0.9
            tags: playfield
            fade_ms: 100
        l_led1:
            number: 01
            brightness_compensation: 1.0, 0.9, 1.0
            tags: playfield
            fade_ms: 100
            debug_logging: true
        l_shoot_again:
            number: 02
            tags: lower playfield
            label: Shoot Again Light




<LED Name>:
~~~~~~~~~~~

Just like the other parts of the configuration file, each entry under
*leds:* represents the name of the LED as it will be used in the game
code.



number:
~~~~~~~

This is the hardware address of the LED. The exact format depends on
what type of LED Controller you have. Click on the links below to go
to the how to guides for each platform which have the details of how
their numbering works.


+ `PD-LED boards (used with a Multimorphic P-ROC or P3-ROC)`_
+ `FAST Pinball Controllers`_
+ `FadeCandy (also can be used with Multimorphic or FAST hardware)`_
+ Open Pixel Control hardware (can be used in conjunction with
  Multimorphic or FAST hardware, see below for numbering)




LED numbering withOpen Pixel Control LEDs:
``````````````````````````````````````````

You can use MPF's *openpixel* platform interface to control LEDs via
the `Open Pixel Control (OPC) protocol`_. For each LED, you need to
configure the channel number and LED number. You do this by specifying
the channel number, then a dash, then the LED number:


::

    
    l_led0:
        number: 0-0
    l_right_ramp:
        number: 0-1
    l_space_ship:
        number: 1-47


Note that the FadeCandy LED controller is a valid OPC controller, but
if you use it via the `fadecandy` interface rather than the
`openpixel` interface, you can take advantage of advanced features of
the FadeCandy hardware.



brightness_compensation:
~~~~~~~~~~~~~~~~~~~~~~~~

Allows you to configure the brightness compensation for this RGB LED.
(Read more about brightness compensation in our description of how MPF
supports RGB LEDs.) Brightness compensationis configured as a floating
point value. You can enter a single value (which will be used for all
three R, G, and B elements in this LED, or you can configure three
separate values.


::

    
    l_led0:
        number: 0-0
        brightness_compensation: .85
    l_right_ramp:
        number: 2-28
        brightness_compensation: 1.0, 1.0, .9


In the above example, *l_led0* is configured for a brightness
compensation of *.85*, which means that every LED color command that's
sent to *led0* will be multiplied by 0.85. (In other words, this LED
will always only run at 85% brightness. For LED *l_right_ramp* in the
example above, the red and greenelements have a brightness
compensation of 1.0 (which means they're actually not compensating),
while the blue element has a brightness compensation of 0.9. This
means the blue value will always only show at 90% brightness as
compared to the red and green. (For example, settingthe *right_ramp*
to color values [255, 255, 255] will actually send values of [255,
255, 230].) This is nice for situations where you have an LED package
where one of the elements is out of whack and you want to tune it to
match the others. You can also specify brightness compensation values
higher than 1.0 (for individual elements and entire LEDs), which can
be nice if you have elements that are going bad that you want to crank
up a bit, though no matter what MPF cannot send a value higher than
255 to the hardware. Also remember that there is a global brightness
compensation setting (in the configuration files at
*`led_settings:`_brightness_compensation:* which lets you (or the
operator) "turn down" all the LEDs in the game. (No more blinding your
eyes out in a game with RGB LEDs in a dark bar!) If the global
brightness compensation setting is configured, then it will be
combined with the brightness compensation settings for each individual
LED, meaning you can still tune individual LED elements even if you
are using the global setting.



default_color:
~~~~~~~~~~~~~~

You can specify a default color for this LED that will be used when
the LED is activated by a command which just turns it "on." This
default color is a six-character hex string in *rrggbb* format, like
*ff000* for red, *ffff00* for yellow, etc. Note that you can override
this default by specifying the color of the LED at any time. The
default is just used if something asks the LED to turn on so it knows
what color to use.



Device Control Events
---------------------

Device control events are events you can use to control devices. They
are configured in your machine-wide or mode config with settings that
end in *_events*. For example, if a device has a setting for
*enable_events:* and you add an event to that setting, then when that
event is posted, the device will enable. You can add single events or
lists of events to these settings, and you can also configure time-
delays for how much time passes between the event being posted and the
action to take place. Details are available in the `device control
event documentation`_. LEDs make use of the following device control
events:



on_events:
~~~~~~~~~~

Enables this LED with its default color. Default is *None*.



off_events:
~~~~~~~~~~~

Disabled this LED. Default is *None*.



Settings that apply to all device types
---------------------------------------

There are some settings that apply to all types of devices that also
apply here.



tags:
~~~~~

A list of one or more tags that apply to this device. Tags allow you
to access groups of devices by tag name.



label:
~~~~~~

The plain-English name for this device that will show up in operator
menus and trouble reports.



debug:
~~~~~~

Set this to *true* to add lots of logging information about this shot
to the debug log. This is helpful when youâ€™re trying to troubleshoot
problems with this shot. Default is *False*.

.. _FadeCandy (also can be used with Multimorphic or FAST hardware): https://missionpinball.com/docs/howto/how-to-use-fadecandy-for-leds/
.. _RGB LEDs: https://missionpinball.com/docs/mpf-core-architecture/mechs/low-level-mechs/rgb-led/
.. _Matrix Lights: https://missionpinball.com/docs/configuration-file-reference/matrixlights/
.. _FAST Pinball Controllers: https://missionpinball.com/docs/howto/how-to-use-a-fast-pinball-controller-with-mpf/
.. _PD-LED boards (used with a Multimorphic P-ROC or P3-ROC): https://missionpinball.com/docs/howto/how-to-use-a-p3-roc-with-mpf/
.. _device control event documentation: https://missionpinball.com/docs/configuration-file-reference/important-config-file-concepts/configuring-device-control-events/
.. _Open Pixel Control (OPC) protocol: http://openpixelcontrol.org/
.. _led_settings:: https://missionpinball.com/docs/configuration-file-reference/ledsettings/


