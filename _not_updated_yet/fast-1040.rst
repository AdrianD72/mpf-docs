
The `fast:` section of the machine configuration files is where you
configure hardware options that are specific to the FAST Pinball
Controller. This sectioncan be used in your machine-wide config files.
This section *cannot* be used in mode-specific config files. Note that
we have a how to guide which includes `all the FAST-specific
settings`_ throughout your entire config file, so be sure to read that
if you have FAST hardware.


::

    
    fast:
        ports: com3, com4, com5
        config_number_format: hex
        baud: 921600
        watchdog: 1s
        default_debounce_close: 10ms
        default_debounce_open: 30ms




ports: (required)
~~~~~~~~~~~~~~~~~

This is the list of the virtual COM ports that the FAST controller
uses.On Windows machines it's typically something like `com5` or
`com6`. On Linux and Macs, it's probably something like `/dev/xxxx`.
If you don't know the port names that your FAST Controller is using,
the easiest way is just to plug it in (make sure it's on) and see what
port appears. You can confirm this by unplugging it or powering it off
and making sure those arethe ports that disappear too. The FAST Core
and FAST WPC controllers use three portsâ€”one each for the DMD
processor, the NET (main) processor, and one for the LED processor.
You want to enter the first three ports into your config. The FAST
Nano controller does not have a DMD processor, so you need to add the
middle two ports that do show up. Note that if you're using Windows
and you have COM port numbers greater than 9, you may have to enter
the port names like this: `\\.\COM10, \` `\.\COM11, \` `\.\COM12`,
etc. (It's a Windows thing. Google it for details.) That said, it
seems that Windows 10 can just use the port names like normal: `com10,
com11, com12`, so try that first and then try the alternate format if
it doesn't work.



config_number_format:
~~~~~~~~~~~~~~~~~~~~~

This specifies whether you want to specify the addresses of your
lights, LEDs, coils, and switches by their integer values or as hex
values. Valid options here are `hex`and `int`. Note if you configure
your `driverboards:` as `wpc` or `wpc95`(in the `hardware:` section),
then you also have the option of using the original WPC numbers from
your operators manual.



baud:
~~~~~

The baudrate for the FAST COM ports. The default is 921600. This
setting is included in the `mpfconfig.yaml` default configuration
file, so you don't have to add it to your config file unless you're
setting a value other than the default.



watchdog:
~~~~~~~~~

The FAST controllers include a "watchdog" timer. A watchdog is a timer
that is continuously counting down towards zero, and if it ever hits
zero, the controller shuts off all the power to the drivers. The idea
is that every time MPF runs a game loop (so, 30 times a second or
whatever), MPF tells the FAST controller to reset the watchdog timer.
So this timer is constantly getting reset and never hits zero. The
purpose of this is to prevent a coil from burning out if MPF crashes
or loses communication with the hardware. In those cases the watchdog
timer runs to zero and the FAST controller kills the power. You can
set the watchdog timer to whatever you want. (This is essentially the
max time a driver could be stuck "on" if MPF crashes.) The default is
1 second which is probably fine for almost everyone, and you don't
have to include this section in your config if you want to use the
default.



default_debounce_close:
~~~~~~~~~~~~~~~~~~~~~~~

This is the default debounce time that the FAST controller will use
for switches when they transition from the open to the closed state.
You can add this section to your config to set it to whatever you
want, or you can leave it out to use the default which is currently
10ms. Basically if you hit switches or targets and they don't
register, that means you need to set a shorter debounce time. And if
you get random switch events when a switch isn't actively closed, you
need to increase the debounce time. You can also set the debounce time
on a switch-by-switch basis.



default_debounce_open:
~~~~~~~~~~~~~~~~~~~~~~

This is like default_debounce_close, except it controls the timing of
the switch moving from the closed to open position. The default is
30ms.

.. _all the FAST-specific settings: https://missionpinball.com/docs/howto/how-to-use-a-fast-pinball-controller-with-mpf/


