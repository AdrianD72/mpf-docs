
The `mode:` section of a configuration file is used to specify general
settings for a particular mode. This section *cannot* be used in your
machine-wide config files. This section *can* be used in mode-specific
config files. Notethat this `mode:` section is different than the
`modes:` section. (The `modes`: section a machine-wide setting where
you list all the modes that are made available to MPF when it boots
up. The `mode:` section we're talking about here is for the settings
for each specific mode in a mode configuration file.) Let's take a
look at an example `mode:` section from a multiball mode:


::

    
    mode:
        start_events: ball_starting
        stop_events: timer_mode_timer_complete, shot_right_ramp 
        code: skillshot.SkillShot
        priority: 300


Let's look at each of these settings:



start_events:
~~~~~~~~~~~~~

The name of an MPF event (or a list of multiple events) that, when
posted, cause this mode to start. (To enter multiple events, see the
`note about adding lists to configuration files`_.) If you add more
than one event here, then any one of the events will cause the mode to
start. If the mode is already running when one of the start events is
posted, that's ok. (i.e. It won't start over or break.) For modes that
you want to start when the player's ball starts (like for your base
mode, ball save, or skillshot, you'd enter `ball_starting` here. For
modes that should start when some progress has been made in the game,
enter the name of the event that represents when you want to start the
mode. This could be the event from a shot being made, the resultant
event from a Logic Block being completed, etc.



stop_events:
~~~~~~~~~~~~

Like start_events, except a stop_event causes the mode to stop which
will remove itself from the list of active modes. All of the things
you configured in this mode's config file will be unloaded. (i.e.
slides and shows won't play, scoring and shot events are removed,
etc.) In the skillshot mode from the example above, there are two
`stop_events:`. The first entry is the event that's posted when a
timer called "mode_timer" is complete. (In this case this is a timed
mode, so when that timer expires, the mode ends.) The second event is
when the skillshot is made (the right ramp) in this case. (This is
because once the skillshot is made, you want to remove this mode.) If
a mode is stopped and another one of the stop_events is posted, that's
ok. The mode will remain stopped.



code:
~~~~~

If you want to write some custom Python code for this mode, you can
specify the name of your file as well as the class (a child class of
Mode). This entry is completely optional. If you don't need to write
custom Python code for this mode (i.e. if you can do everything you
need to do with config files which will probably be the case 90% of
the time, then you can skip this setting.



priority:
~~~~~~~~~

This is the numeric value that this mode will run at. (Note that this
cannot be changed once the mode is running.) This priority affects two
things:


+ The priority order of the modes which affects the order shots and
  other "blockable" events are processed.
+ The default priority that other things from this mode run at
  (display shows, light shows, sounds, etc.).


Our best practices are that you should have a 100-point separation
between modes. (i.e. run your base mode at 100, a game mode at 200,
maybe you're extra ball awarded mode at 10,000, etc.) The reason for
this is that with big spacing between modes, you still have room to
adjust the relative priorities of things that happen within a mode
without the risk of those things affecting other modes.



stop_priority:
~~~~~~~~~~~~~~

This optional setting allows you to control the order that modes stop.
Be default, modes register their stop handlers at the level the mode
is operating plus one. (Why +1? Because if you have one mode set to
stop at an event and another mode set to start on the same event,
automatically adding +1 to the stop event handler guarantees that the
old mode will stop before the new mode starts.) If you add stop
priority, it's relative and added on top of the priority of the mode
plus the +1. So if you have one mode you want to stop before another
mode, you can simply add `stop_priority: 1` to that mode, and if other
modes don't have a stop_priority set then they'll stop after it. (A
higher number means that mode stops first.) If you have a mode you
want to stop last, then don't enter a *stop_priority* for it but enter
`stop_priority: 1` for all the other modes you want to stop first. You
can add different *stop_priority* values for different modes, and they
will all stop in order, highest numeric value to lowest. Note that the
*stop_priority* setting only matters when you have multiple modes that
are set to end on the same stop_event.



start_priority:
~~~~~~~~~~~~~~~

Like *stop_priority*, but it controls the order modes start it. If you
have a mode you want to start before others, enter a value here.



use_wait_queue:
~~~~~~~~~~~~~~~

True/false setting which specifies whether this mode should "pause"
the flow of MPF while this mode is running. This only works if the
mode is started via a "queue" event (something like ball_ending,
game_ending, etc.). When set to true, game flow will be halted as long
as this mode is running. Game flow proceeds when this mode ends. More
details about how this works are available in the ` *How to create a
bonus mode*`_ guide.



stop_on_ball_end:
~~~~~~~~~~~~~~~~~

The default behavior for modes in MPF is that they're automatically
stopped when the ball ends. Some modes (like the built-in *game* and
*credit* modes) need to stay running even when the ball ends, so to
support that you can add `stop_on_ball_end: false` to the mode:
section of a mode's config file. Default is *true*.



restart_on_next_ball:
~~~~~~~~~~~~~~~~~~~~~

If you set this to *true*, a mode that was running when the ball ended
that was also configured to stop on ball end will automatically start
for the next ball this player has. This is managed on a per-player
basis via the untracked player variable *_restart_modes_on_next_ball*
which maintains a list of the mode to be restarted.

.. _How to create a bonus mode: https://missionpinball.com/docs/howto/create-a-bonus-mode/
.. _note about adding lists to configuration files: https://missionpinball.com/docs/configuration-file-reference/adding-lists-and-lists-of-lists-to-config-files/


