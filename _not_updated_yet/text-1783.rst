
The *Text*`display element`_ is used to render text to the display.
Text can be displayed directly as entered, or you can access player
variables and machine variables to dynamically control what text shows
up. If you're using a display which supports fonts (pretty much
anything except for the segmented display), you'll also need to
configure `MPF fonts`_. Luckily MPF can use standard TrueType fonts.
We have a tutorial which explains how to import and configure TrueType
fonts `here`_. Textdisplay elements use the same `positioning &
placement settings`_ as other display elements. There are also text-
specific settings, including:



text: (required)
~~~~~~~~~~~~~~~~

This is thestring of the text you'd like to display. To dynamically
display text based on player variables or machine variables, see the
section on dynamic text further down on this page.



font:
~~~~~

Thename of the font (as you defined it in your configuration file)
this text will be rendered in. If you don't specify a name, it will
use whatever settings you have for the "default" font in your config
file. Even though this setting is called "font", the `fonts you define
in your config file`_ can also have settings which include the actual
TrueType font, the size, and antialias settings.



number_grouping:
~~~~~~~~~~~~~~~~

True/False setting. If True, it groups the number by thousands. (For
example, "12345" will be rendered as "12,345.") You can specify the
separator character in the config file.



antialias:
~~~~~~~~~~

True/False. If True, the text will be antialiased, False and it won't
be. See our guide for using TrueType fonts mentioned above for more
information. Antialiasing is a property of the MPF font object, so if
you specify it here you will specifically override the setting for the
font you specified.



size:
~~~~~

You can override the font size setting as defined in your MPF font by
entering a size value here. In most cases you would not want to do
this. If you want to create text that's bigger or smaller, it's best
to create a new entry in the ` `Fonts:` section`_ of your config file
for that size. That way you can fine tune the size and cropping
settings.



shade:
~~~~~~

If this text element is being used with a DMD, `shade` is the
brightness value (0-15) of the text. If you don't specify a value
here, it will use 15 (full brightness).



bg_shade:
~~~~~~~~~

If this text element is being used with a DMD, `bg_shade` is the
brightness value (0-15) of the background.If you don't specify an
option it will use 0 (black). Note that entering a value here will
disable alpha blending.



color:
~~~~~~

The hex string of the color when used with 24-bit surfaces. This has
to be six characters, and you do *not* include the pound sign (#). So
it's just entered like this: `color: ff5500` or `color='ff5500'`
(depending on whether you're specifying this via a YAML file or via
code). Default is white ( `ffffff`).



bg_color:
~~~~~~~~~

The hex string of the background color when used with 24-bit surfaces.
If you specify this, it will disable the alpha blending. Default is
black ( `000000`).



opaque:
~~~~~~~

A True/False setting which controls whether or not the background of
this text element is opaque. If True, then if you positionthis text
element on top of another, then the background color will block
whatever's behind it. If False, then the background is transparent so
only the characters in the text will show up. Default is False. If you
set a `bg_shade` or `bg_color`, that will force `opaque` to be True.



Dynamic Text
------------

Typically the text you enter in the `text:` section of the *text*
display element is just shown on the display exactly as you enter it.
However you also have the option of showing the values of player
variables and machine variables in your text. When you use the
techniques described below to place dynamic text in slides, the value
of the text is updated in real time whenever the underlying player or
machine variable changes, even if the slide has already been created.



Accessing the current player's variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can access the value of a player variable for the current player
by wrapping the variable name like this: %player|<variable>%. For
example:


::

    
    text: "%player|score%"


You can mix-and-match replaced text with hard-coded text. For example:


::

    
    text: "YOUR SCORE: %player|score%"


Note that you don't technically need quotes around these entries, but
it's probably a good practice to include quotes since quotes will
force the YAML processor to view your entries as a string. Otherwise
certain characters in your string could confuse or break things. For
example, the first example above needs quotes because a YAML value
can't start with a percent sign, and the second example would break
because the colon after SCORE would confuse the YAML parser. Putting
both of these examples in quotes fixes those problems.



Accessing variables from any player
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can access the value of a player variable from any player by
wrapping the variable name like this: %player<number>|<variable>%. For
example:


::

    
    text: %player2|score%


The example above will always show the value of player 2's "score"
variable, regardless of what the current player is. What's cool is
that if the player you're referring to doesn't exist, then MPF will
not show anything. This means you can (for example), build a 4-up
score display which shows all 4 players' scores, but if there's only a
3-player game going on then the display won't show anything for player
4.



Accessing machine variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Finally, you can access machine variables with the machine| prefix,
like this:


::

    
    text: %machine|credits%




Putting it all together
~~~~~~~~~~~~~~~~~~~~~~~

You can combine all these techniques together to build up complex
slides. For example, here's a typical 4-up score display slide: ` `_
The slide_player: configuration for this uses several text display
elements:


::

    
    player_1_ball_started:
      - type: text
        text: "%player1|score%"
        number_grouping: true
        min_digits: 2
        v_pos: top
        h_pos: right
        x: -60
        y: 2
      - type: text
        text: "%player2|score%"
        font: medium
        v_pos: top
        h_pos: right
        number_grouping: true
        min_digits: 2
        x: -2
        y: 2
      - type: text
        text: "%player3|score%"
        font: medium
        v_pos: bottom
        h_pos: right
        y: -10
        x: -60
        number_grouping: true
        min_digits: 2
      - type: text
        text: "%player4|score%"
        font: medium
        v_pos: bottom
        h_pos: right
        y: -10
        x: -2
        number_grouping: true
        min_digits: 2
      - type: text
        text: BALL %player1|ball%    %machine|credits_string%
        v_pos: bottom
        font: small
        y: -1


.. _ placement settings: https://missionpinball.com/docs/displays/display-elements/positioning/
.. _ section: https://missionpinball.com/docs/configuration-file-reference/fonts/
.. _here: https://missionpinball.com/docs/tutorial/how-to-adding-truetype-fonts/
.. _display element: https://missionpinball.com/docs/displays/display-elements/
.. _MPF fonts: https://missionpinball.com/docs/displays/fonts/


